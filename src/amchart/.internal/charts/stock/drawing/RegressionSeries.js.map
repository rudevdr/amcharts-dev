{"version":3,"file":"RegressionSeries.js","sourceRoot":"","sources":["../../../../../../../src/.internal/charts/stock/drawing/RegressionSeries.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ValueAxis } from \"../../xy/axes/ValueAxis\";\r\nimport type { AxisRenderer } from \"../../xy/axes/AxisRenderer\";\r\n\r\nimport { SimpleLineSeries, ISimpleLineSeriesSettings, ISimpleLineSeriesPrivate, ISimpleLineSeriesDataItem } from \"./SimpleLineSeries\";\r\n\r\nfunction round(number: number, precision: number): number {\r\n\tconst factor = 10 ** precision;\r\n\treturn Math.round(number * factor) / factor;\r\n}\r\n\r\n// Modified from the regression npm package (under the MIT license)\r\nfunction linear(data: Array<[number, number]>, precision: number = 2): Array<[number, number]> {\r\n\tconst sum = [0, 0, 0, 0, 0];\r\n\tlet len = 0;\r\n\r\n\tfor (let n = 0; n < data.length; n++) {\r\n\t\tif (data[n][1] !== null) {\r\n\t\t\tlen++;\r\n\t\t\tsum[0] += data[n][0];\r\n\t\t\tsum[1] += data[n][1];\r\n\t\t\tsum[2] += data[n][0] * data[n][0];\r\n\t\t\tsum[3] += data[n][0] * data[n][1];\r\n\t\t\tsum[4] += data[n][1] * data[n][1];\r\n\t\t}\r\n\t}\r\n\r\n\tconst run = ((len * sum[2]) - (sum[0] * sum[0]));\r\n\tconst rise = ((len * sum[3]) - (sum[0] * sum[1]));\r\n\tconst gradient = run === 0 ? 0 : round(rise / run, precision);\r\n\tconst intercept = round((sum[1] / len) - ((gradient * sum[0]) / len), precision);\r\n\r\n\tfunction predict(x: number): [number, number] {\r\n\t\treturn [\r\n\t\t\tround(x, precision),\r\n\t\t\tround((gradient * x) + intercept, precision)\r\n\t\t];\r\n\t}\r\n\r\n\treturn data.map(point => predict(point[0]));\r\n}\r\n\r\nexport interface IRegressionSeriesDataItem extends ISimpleLineSeriesDataItem {\r\n}\r\n\r\nexport interface IRegressionSeriesSettings extends ISimpleLineSeriesSettings {\r\n\r\n}\r\n\r\nexport interface IRegressionSeriesPrivate extends ISimpleLineSeriesPrivate {\r\n}\r\n\r\nexport class RegressionSeries extends SimpleLineSeries {\r\n\tpublic static className: string = \"RegressionSeries\";\r\n\tpublic static classNames: Array<string> = SimpleLineSeries.classNames.concat([RegressionSeries.className]);\r\n\r\n\tdeclare public _settings: IRegressionSeriesSettings;\r\n\tdeclare public _privateSettings: IRegressionSeriesPrivate;\r\n\tdeclare public _dataItemSettings: IRegressionSeriesDataItem;\r\n\r\n\tprotected _tag = \"regression\";\r\n\r\n\tprotected _afterNew() {\r\n\t\tsuper._afterNew();\r\n\t\tthis.setPrivate(\"allowChangeSnap\", false);\r\n\t\tthis.set(\"snapToData\", true);\r\n\t}\t\r\n\r\n\tprotected _updateSegment(index: number) {\r\n\t\tconst diP1 = this._di[index][\"p1\"];\r\n\t\tconst diP2 = this._di[index][\"p2\"];\r\n\r\n\t\tconst series = this.get(\"series\");\r\n\t\tif (series && diP1 && diP2) {\r\n\t\t\tconst xAxis = series.get(\"xAxis\") as ValueAxis<AxisRenderer>;\r\n\r\n\t\t\tlet x1 = this._getXValue(diP1.get(\"valueX\" as any));\r\n\t\t\tlet x2 = this._getXValue(diP2.get(\"valueX\" as any));\r\n\r\n\t\t\tconst di1 = xAxis.getSeriesItem(series, xAxis.valueToPosition(x1));\r\n\t\t\tconst di2 = xAxis.getSeriesItem(series, xAxis.valueToPosition(x2));\r\n\t\t\tconst field = this.get(\"field\") + \"Y\";\r\n\r\n\t\t\tif (di1 && di2) {\r\n\t\t\t\tconst dataItems = series.dataItems;\r\n\r\n\t\t\t\tlet startIndex = dataItems.indexOf(di1);\r\n\t\t\t\tlet endIndex = dataItems.indexOf(di2);\r\n\r\n\t\t\t\tlet inversed = false;\r\n\t\t\t\tif (startIndex > endIndex) {\r\n\t\t\t\t\tinversed = true;\r\n\t\t\t\t\t[startIndex, endIndex] = [endIndex, startIndex];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst points: Array<[number, number]> = []\r\n\t\t\t\tlet ii = 0;\r\n\t\t\t\tfor (let i = startIndex; i <= endIndex; i++) {\r\n\t\t\t\t\tconst dataItem = dataItems[i];\r\n\t\t\t\t\tpoints.push([ii, dataItem.get(field as any) as any]);\r\n\t\t\t\t\tii++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst resultPoints = linear(points);\r\n\t\t\t\tconst len = resultPoints.length;\r\n\r\n\t\t\t\tif (len > 1) {\r\n\t\t\t\t\tconst p1 = resultPoints[0];\r\n\t\t\t\t\tconst p2 = resultPoints[resultPoints.length - 1];\r\n\t\t\t\t\tif (p1 && p2) {\r\n\t\t\t\t\t\tlet y1 = p1[1];\r\n\t\t\t\t\t\tlet y2 = p2[1];\r\n\r\n\t\t\t\t\t\tif (inversed) {\r\n\t\t\t\t\t\t\t[y1, y2] = [y2, y1];\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis._setContext(diP1, \"valueY\", y1, true);\r\n\t\t\t\t\t\tthis._setContext(diP2, \"valueY\", y2, true);\r\n\r\n\t\t\t\t\t\tthis._setContext(diP1, \"valueX\", x1);\r\n\t\t\t\t\t\tthis._setContext(diP2, \"valueX\", x2);\r\n\r\n\t\t\t\t\t\tthis._positionBullets(diP1);\r\n\t\t\t\t\t\tthis._positionBullets(diP2);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"]}