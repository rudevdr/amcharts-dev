{"version":3,"file":"StockPanel.js","sourceRoot":"","sources":["../../../../../../src/.internal/charts/stock/StockPanel.ts"],"names":[],"mappings":"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","sourcesContent":["import type { PanelControls } from \"./PanelControls\";\r\nimport type { StockChart } from \"./StockChart\"\r\nimport type { XYSeries } from \"../xy/series/XYSeries\";\r\n\r\nimport { XYChart, IXYChartPrivate, IXYChartSettings } from \"../xy/XYChart\";\r\nimport { ListAutoDispose } from \"../../core/util/List\";\r\nimport type { Rectangle } from \"../../core/render/Rectangle\";\r\n\r\nimport * as $array from \"../../core/util/Array\";\r\n\r\nexport interface IStockPanelSettings extends IXYChartSettings {\r\n}\r\n\r\nexport interface IStockPanelPrivate extends IXYChartPrivate {\r\n\r\n\t/**\r\n\t * A target [[StockChart]].\r\n\t */\r\n\tstockChart: StockChart;\r\n\r\n}\r\n\r\n/**\r\n * A panel instance for the [[StockChart]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/stock/panels/} for more info\r\n * @important\r\n */\r\nexport class StockPanel extends XYChart {\r\n\tpublic static className: string = \"StockPanel\";\r\n\tpublic static classNames: Array<string> = XYChart.classNames.concat([StockPanel.className]);\r\n\r\n\tdeclare public _settings: IStockPanelSettings;\r\n\tdeclare public _privateSettings: IStockPanelPrivate;\r\n\r\n\t/**\r\n\t * An instance of [[PanelControls]].\r\n\t */\r\n\tpublic panelControls!: PanelControls;\r\n\r\n\t/**\r\n\t * Panel resize grip element.\r\n\t *\r\n\t * @since 5.4.7\r\n\t */\r\n\tpublic panelResizer?: Rectangle;\r\n\r\n\t/**\r\n\t * A list of drawings on panel.\r\n\t *\r\n\t */\r\n\tpublic readonly drawings: ListAutoDispose<XYSeries> = new ListAutoDispose();\r\n\r\n\tprotected _afterNew() {\r\n\t\tsuper._afterNew();\r\n\r\n\t\tthis._disposers.push(this.drawings.events.onAll((change) => {\r\n\t\t\tif (change.type === \"clear\") {\r\n\t\t\t\t$array.each(change.oldValues, (series) => {\r\n\t\t\t\t\tthis.series.removeValue(series);\r\n\t\t\t\t})\r\n\t\t\t} else if (change.type === \"push\") {\r\n\t\t\t\tthis.series.push(change.newValue);\r\n\t\t\t} else if (change.type === \"setIndex\") {\r\n\t\t\t\tthis.series.setIndex(change.index, change.newValue);\r\n\t\t\t} else if (change.type === \"insertIndex\") {\r\n\t\t\t\tthis.series.insertIndex(change.index, change.newValue);\r\n\t\t\t} else if (change.type === \"removeIndex\") {\r\n\t\t\t\tthis.series.removeIndex(change.index);\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(\"Unknown IListEvent type\");\r\n\t\t\t}\r\n\t\t}));\r\n\t}\r\n\r\n\t/**\r\n\t * Moves panel up.\r\n\t */\r\n\tpublic moveUp(): void {\r\n\t\tconst stockChart = this.getPrivate(\"stockChart\");\r\n\t\tconst children = stockChart.panelsContainer.children;\r\n\r\n\t\tconst index = children.indexOf(this);\r\n\t\tif (index > 0) {\r\n\t\t\tchildren.moveValue(this, index - 1);\r\n\t\t}\r\n\r\n\t\tstockChart._updateControls();\r\n\t}\r\n\r\n\t/**\r\n\t * Moves panel down.\r\n\t */\r\n\tpublic moveDown(): void {\r\n\t\tconst stockChart = this.getPrivate(\"stockChart\");\r\n\t\tconst children = stockChart.panelsContainer.children;\r\n\r\n\t\tconst index = children.indexOf(this);\r\n\t\tif (index < children.length - 1) {\r\n\t\t\tchildren.moveValue(this, index + 1);\r\n\t\t}\r\n\t\tstockChart._updateControls();\r\n\t}\r\n\r\n\t/**\r\n\t * Closes panel.\r\n\t */\r\n\tpublic close(): void {\r\n\t\tconst stockChart = this.getPrivate(\"stockChart\");\r\n\t\tstockChart.panels.removeValue(this);\r\n\t\tstockChart._updateControls();\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles \"full screen\" mode of the panel on and off.\r\n\t */\r\n\tpublic expand(): void {\r\n\t\tconst stockChart = this.getPrivate(\"stockChart\");\r\n\r\n\t\tconst panels: Array<StockPanel> = [];\r\n\t\tstockChart.panels.each((panel) => {\r\n\t\t\tif (!panel.isVisible()) {\r\n\t\t\t\tpanels.push(panel);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\t$array.each(panels, (panel) => {\r\n\t\t\tpanel.setPrivate(\"visible\", true);\r\n\t\t})\r\n\r\n\t\tif (panels.length == 0) {\r\n\t\t\tstockChart.panels.each((panel) => {\r\n\t\t\t\tif (panel != this) {\r\n\t\t\t\t\tpanel.setPrivate(\"visible\", false);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tstockChart._updateControls();\r\n\r\n\t\tif (panels.length == 0) {\r\n\t\t\tconst panelControls = this.panelControls;\r\n\t\t\tpanelControls.upButton.setPrivate(\"visible\", false);\r\n\t\t\tpanelControls.downButton.setPrivate(\"visible\", false);\r\n\t\t\tpanelControls.closeButton.setPrivate(\"visible\", false);\r\n\t\t}\r\n\t}\r\n}\r\n"]}