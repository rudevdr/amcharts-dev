{"version":3,"file":"AxisRendererCircular.js","sourceRoot":"","sources":["../../../../../../src/.internal/charts/radar/AxisRendererCircular.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Axis } from \"../xy/axes/Axis\";\nimport type { RadarChart } from \"./RadarChart\";\nimport type { Grid } from \"../xy/axes/Grid\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport type { Graphics } from \"../../core/render/Graphics\";\nimport type { AxisTick } from \"../xy/axes/AxisTick\";\nimport type { AxisBullet } from \"../xy/axes/AxisBullet\";\nimport type { Tooltip } from \"../../core/render/Tooltip\";\n\nimport { Slice } from \"../../core/render/Slice\";\nimport { AxisRenderer, IAxisRendererSettings, IAxisRendererPrivate } from \"../xy/axes/AxisRenderer\";\nimport { AxisLabelRadial } from \"../xy/axes/AxisLabelRadial\";\nimport { Percent, p100 } from \"../../core/util/Percent\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { Template } from \"../../core/util/Template\";\nimport { arc } from \"d3-shape\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\n\n\nexport interface IAxisRendererCircularSettings extends IAxisRendererSettings {\n\n\t/**\n\t * Outer radius of the axis.\n\t *\n\t * If set in percent, it will be relative to chart's own `radius`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-axes/#Axis_radii_and_angles} for more info\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * Inner radius of the axis.\n\t *\n\t * If set in percent, it will be relative to chart's own `innerRadius`.\n\t *\n\t * If value is negative, inner radius will be calculated from the outer edge.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-axes/#Axis_radii_and_angles} for more info\n\t */\n\tinnerRadius?: number | Percent;\n\n\t/**\n\t * Series start angle.\n\t *\n\t * If not set, will use chart's `startAngle.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-axes/#Axis_radii_and_angles} for more info\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Series end angle.\n\t *\n\t * If not set, will use chart's `endAngle.`\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/radar-chart/radar-axes/#Axis_radii_and_angles} for more info\n\t */\n\tendAngle?: number;\n\n\t/**\n\t * @todo am: needs description\n\t */\n\taxisAngle?: number;\n\n}\n\nexport interface IAxisRendererCircularPrivate extends IAxisRendererPrivate {\n\n\t/**\n\t * Actual radius of the label in pixels.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Actual inner radius of the label in pixels.\n\t */\n\tinnerRadius?: number;\n\n\t/**\n\t * Actual start angle of the label in degrees.\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Actual end angle of the label in degrees.\n\t */\n\tendAngle?: number;\n\n}\n\n/**\n * Renderer for circular axes.\n */\nexport class AxisRendererCircular extends AxisRenderer {\n\n\t/**\n\t * Chart this renderer is for.\n\t */\n\tdeclare public chart: RadarChart | undefined;\n\n\t/**\n\t * A list of labels in the axis.\n\t *\n\t * `labels.template` can be used to configure labels.\n\t *\n\t * @default new ListTemplate<AxisLabelRadial>\n\t */\n\tpublic readonly labels: ListTemplate<AxisLabelRadial> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => AxisLabelRadial._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), this.get(\"themeTags\", []))\n\t\t}, [this.labels.template])\n\t);\n\n\n\t/**\n\t * A list of fills in the axis.\n\t *\n\t * `axisFills.template` can be used to configure axis fills.\n\t *\n\t * @default new ListTemplate<Slice>\n\t */\n\tpublic readonly axisFills: ListTemplate<Slice> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => Slice._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.axisFills.template.get(\"themeTags\", [\"fill\"]), this.get(\"themeTags\", []))\n\t\t}, [this.axisFills.template])\n\t);\n\n\n\tpublic static className: string = \"AxisRendererCircular\";\n\tpublic static classNames: Array<string> = AxisRenderer.classNames.concat([AxisRendererCircular.className]);\n\n\tdeclare public _settings: IAxisRendererCircularSettings;\n\tdeclare public _privateSettings: IAxisRendererCircularPrivate;\n\n\tprotected _fillGenerator = arc();\n\n\tpublic _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"renderer\", \"circular\"]);\n\t\tsuper._afterNew();\n\t\tthis.setPrivateRaw(\"letter\", \"X\");\n\t\tthis.setRaw(\"position\", \"absolute\");\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\")) {\n\t\t\tthis.updateLayout();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processAxis() {\n\t\tsuper.processAxis();\n\t\tconst axis = this.axis;\n\t\taxis.labelsContainer.set(\"isMeasured\", false);\n\t}\t\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLayout() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tconst radius = chart.getPrivate(\"radius\", 0);\n\n\t\t\tlet r = $utils.relativeToValue(this.get(\"radius\", p100), radius);\n\n\t\t\tif (r < 0) {\n\t\t\t\tr = radius + r;\n\t\t\t}\n\n\t\t\tthis.setPrivate(\"radius\", r);\n\n\t\t\tlet ir = $utils.relativeToValue(this.get(\"innerRadius\", chart.getPrivate(\"innerRadius\", 0)), radius) * chart.getPrivate(\"irModifyer\", 1);\n\n\t\t\tif (ir < 0) {\n\t\t\t\tir = r + ir;\n\t\t\t}\n\n\t\t\tthis.setPrivate(\"innerRadius\", ir);\n\n\t\t\tlet startAngle = this.get(\"startAngle\", chart.get(\"startAngle\", -90));\n\t\t\tlet endAngle = this.get(\"endAngle\", chart.get(\"endAngle\", 270));\n\n\t\t\tthis.setPrivate(\"startAngle\", startAngle);\n\t\t\tthis.setPrivate(\"endAngle\", endAngle);\n\n\t\t\tthis.set(\"draw\", (display) => {\n\t\t\t\tconst p0 = this.positionToPoint(0);\n\t\t\t\tdisplay.moveTo(p0.x, p0.y);\n\n\t\t\t\tif (startAngle > endAngle) {\n\t\t\t\t\t[startAngle, endAngle] = [endAngle, startAngle];\n\t\t\t\t}\n\n\t\t\t\tdisplay.arc(0, 0, r, startAngle * $math.RADIANS, endAngle * $math.RADIANS);\n\t\t\t});\n\n\t\t\tthis.axis.markDirtySize();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateGrid(grid?: Grid, position?: number, endPosition?: number) {\n\t\tif (grid) {\n\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = grid.get(\"location\", 0.5);\n\t\t\tif (endPosition != null && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tlet radius = this.getPrivate(\"radius\", 0);\n\t\t\tlet innerRadius = this.getPrivate(\"innerRadius\", 0);\n\t\t\tlet angle = this.positionToAngle(position);\n\n\t\t\tthis.toggleVisibility(grid, position, 0, 1);\n\n\t\t\tif (radius != null) {\n\t\t\t\tgrid.set(\"draw\", (display) => {\n\t\t\t\t\tdisplay.moveTo(innerRadius * $math.cos(angle), innerRadius * $math.sin(angle));\n\t\t\t\t\tdisplay.lineTo(radius * $math.cos(angle), radius * $math.sin(angle));\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Converts relative position to angle.\n\t *\n\t * @param   position  Position\n\t * @return            Angle\n\t */\n\tpublic positionToAngle(position: number): number {\n\t\tconst axis: Axis<AxisRenderer> = this.axis;\n\t\tconst startAngle = this.getPrivate(\"startAngle\", 0);\n\t\tconst endAngle = this.getPrivate(\"endAngle\", 360);\n\n\t\tconst start = axis.get(\"start\", 0);\n\t\tconst end = axis.get(\"end\", 1);\n\n\t\tlet arc = (endAngle - startAngle) / (end - start);\n\n\t\tlet angle: number;\n\n\t\tif (this.get(\"inversed\")) {\n\t\t\tangle = startAngle + (end - position) * arc;\n\t\t}\n\t\telse {\n\t\t\tangle = startAngle + (position - start) * arc;\n\t\t}\n\n\t\treturn angle;\n\t}\n\n\t// do not delete\n\tprotected _handleOpposite() { }\n\n\t/**\n\t * Converts relative position to an X/Y coordinate.\n\t *\n\t * @param   position  Position\n\t * @return            Point\n\t */\n\tpublic positionToPoint(position: number): IPoint {\n\t\tconst radius = this.getPrivate(\"radius\", 0);\n\t\tconst angle = this.positionToAngle(position);\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLabel(label?: AxisLabelRadial, position?: number, endPosition?: number, count?: number) {\n\t\tif (label) {\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif (count != null && count > 1) {\n\t\t\t\tlocation = label.get(\"multiLocation\", location);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = label.get(\"location\", location);\n\t\t\t}\n\n\t\t\tif (endPosition != null && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tconst radius = this.getPrivate(\"radius\", 0);\n\t\t\tconst innerRadius = this.getPrivate(\"innerRadius\", 0);\n\t\t\tconst angle = this.positionToAngle(position);\n\n\t\t\tlabel.setPrivate(\"radius\", radius);\n\t\t\tlabel.setPrivate(\"innerRadius\", innerRadius);\n\t\t\tlabel.set(\"labelAngle\", angle);\n\n\t\t\tthis.toggleVisibility(label, position, label.get(\"minPosition\", 0), label.get(\"maxPosition\", 1));\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic fillDrawMethod(fill: Graphics, startAngle?: number, endAngle?: number) {\n\t\tfill.set(\"draw\", (display) => {\n\t\t\tif (startAngle == null) {\n\t\t\t\tstartAngle = this.getPrivate(\"startAngle\", 0);\n\t\t\t}\n\t\t\tif (endAngle == null) {\n\t\t\t\tendAngle = this.getPrivate(\"endAngle\", 0);\n\t\t\t}\n\t\t\tconst y0 = this.getPrivate(\"innerRadius\", 0);\n\t\t\tconst y1 = this.getPrivate(\"radius\", 0);\n\t\t\tthis._fillGenerator.context(display as any);\n\t\t\tthis._fillGenerator({ innerRadius: y0, outerRadius: y1, startAngle: (startAngle + 90) * $math.RADIANS, endAngle: (endAngle + 90) * $math.RADIANS });\n\t\t})\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTick(tick?: AxisTick, position?: number, endPosition?: number, count?: number) {\n\t\tif (tick) {\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif (count != null && count > 1) {\n\t\t\t\tlocation = tick.get(\"multiLocation\", location);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = tick.get(\"location\", location);\n\t\t\t}\n\n\t\t\tif (endPosition != null && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tlet length = tick.get(\"length\", 0);\n\t\t\tconst inside = tick.get(\"inside\");\n\n\t\t\tif (inside) {\n\t\t\t\tlength *= -1\n\t\t\t}\n\n\t\t\tlet radius = this.getPrivate(\"radius\", 0);\n\t\t\tlet angle = this.positionToAngle(position);\n\n\t\t\tthis.toggleVisibility(tick, position, tick.get(\"minPosition\", 0), tick.get(\"maxPosition\", 1));\n\n\t\t\tif (radius != null) {\n\t\t\t\ttick.set(\"draw\", (display) => {\n\t\t\t\t\tdisplay.moveTo(radius * $math.cos(angle), radius * $math.sin(angle));\n\t\t\t\t\tradius += length;\n\t\t\t\t\tdisplay.lineTo(radius * $math.cos(angle), radius * $math.sin(angle));\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateBullet(bullet?: AxisBullet, position?: number, endPosition?: number) {\n\t\tif (bullet) {\n\t\t\tconst sprite = bullet.get(\"sprite\");\n\n\t\t\tif (sprite) {\n\t\t\t\tif (position == null) {\n\t\t\t\t\tposition = 0;\n\t\t\t\t}\n\n\t\t\t\tlet location = bullet.get(\"location\", 0.5);\n\t\t\t\tif (endPosition != null && endPosition != position) {\n\t\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t\t}\n\n\t\t\t\tlet radius = this.getPrivate(\"radius\", 0);\n\t\t\t\tlet angle = this.positionToAngle(position);\n\n\t\t\t\tthis.toggleVisibility(sprite, position, 0, 1);\n\n\t\t\t\tsprite.setAll({ rotation: angle, x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateFill(fill?: Slice, position?: number, endPosition?: number) {\n\t\tif (fill) {\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\t\t\tif (endPosition == null) {\n\t\t\t\tendPosition = 1;\n\t\t\t}\n\n\t\t\tlet startAngle = this.fitAngle(this.positionToAngle(position));\n\t\t\tlet endAngle = this.fitAngle(this.positionToAngle(endPosition));\n\t\t\tfill.setAll({ startAngle: startAngle, arc: endAngle - startAngle });\n\n\t\t\tfill._setSoft(\"innerRadius\", this.getPrivate(\"innerRadius\"));\n\t\t\tfill._setSoft(\"radius\", this.getPrivate(\"radius\"));\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic fitAngle(angle: number): number {\n\t\tconst startAngle = this.getPrivate(\"startAngle\", 0);\n\t\tconst endAngle = this.getPrivate(\"endAngle\", 0);\n\n\t\tconst minAngle = Math.min(startAngle, endAngle);\n\t\tconst maxAngle = Math.max(startAngle, endAngle);\n\n\t\tif (angle < minAngle) {\n\t\t\tangle = minAngle;\n\t\t}\n\n\t\tif (angle > maxAngle) {\n\t\t\tangle = maxAngle;\n\t\t}\n\n\t\treturn angle;\n\t}\n\n\t/**\n\t * Returns axis length in pixels.\n\t *\n\t * @return Length\n\t */\n\tpublic axisLength(): number {\n\t\treturn Math.abs(this.getPrivate(\"radius\", 0) * Math.PI * 2 * (this.getPrivate(\"endAngle\", 360) - this.getPrivate(\"startAngle\", 0)) / 360);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic positionTooltip(tooltip: Tooltip, position: number) {\n\t\tlet radius = this.getPrivate(\"radius\", 0);\n\t\tconst angle = this.positionToAngle(position);\n\t\t//return tooltip.set(\"pointTo\", this.axis._display.toGlobal({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }));\n\t\tthis._positionTooltip(tooltip, { x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTooltipBounds(_tooltip: Tooltip) {\n\n\t}\n}\n"]}