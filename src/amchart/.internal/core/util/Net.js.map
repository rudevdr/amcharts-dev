{"version":3,"file":"Net.js","sourceRoot":"","sources":["../../../../../../src/.internal/core/util/Net.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * A collection of network-related functions\n */\n\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport type { Optional } from \"./Type\";\n\n/**\n * Defines an interface for objects that hold a net request result.\n */\nexport interface INetLoadResult<A> {\n\n\t/**\n\t * A reference to original [[XMLHttpRequest]].\n\t */\n\txhr: XMLHttpRequest;\n\n\t/**\n\t * Request response body.\n\t */\n\tresponse?: string;\n\n\t/**\n\t * Request response as Blob. (if set `responseType = \"blob\"`)\n\t */\n\tblob?: Blob;\n\n\t/**\n\t * Response `Content-Type`.\n\t */\n\ttype: string | null;\n\n\t/**\n\t * Was there an error?\n\t */\n\terror: boolean;\n\n\t/**\n\t * A target object that made the net load request.\n\t */\n\ttarget?: A;\n\n}\n\nexport interface INetRequestOptions {\n\n\t/**\n\t * Custom request headers to be added to HTTP(S) request.\n\t */\n\trequestHeaders?: { key: string, value: string }[];\n\n\t/**\n\t * Specify expected response type.\n\t *\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType} for more info\n\t */\n\tresponseType?: XMLHttpRequestResponseType;\n\n\t/**\n\t * Specify whether to send CORS credentials (defaults to `false`).\n\t *\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials} for more info\n\t */\n\twithCredentials?: boolean;\n}\n\n/**\n * Loads an external file via its URL.\n *\n * Please note that this is an asynchronous function.\n *\n * It will not return the result, but rather a `Promise`.\n *\n * You can use the `await` notion, or `then()`.\n *\n * ```TypeScript\n * // Using await\n * let response = await Net.load( \"http://www.my.com/data.json\" );\n * console.log( response.response );\n *\n * // Using then()\n * Net.load( \"http://www.my.com/data.json\" ).then( ( response ) => {\n *   console.log( response.response );\n * } );\n * ```\n * ```JavaScript\n * // Using then()\n * Net.load( \"http://www.my.com/data.json\" ).then( function( response ) {\n *   console.log( response.response );\n * } );\n * ```\n *\n * @async\n * @see {@link https://www.amcharts.com/docs/v5/concepts/data/net-load-utility/} for more info\n * @param url      URL for the file to load\n * @param target   A target element that is requesting the net load\n * @param options  Request options\n * @return Result (Promise)\n */\nexport function load<A>(url: string, target?: A, options?: INetRequestOptions): Promise<INetLoadResult<A>> {\n\treturn new Promise<INetLoadResult<A>>((success, error) => {\n\n\t\t// Is return type Blob?\n\t\tlet isBlob = options != null && options.responseType == \"blob\";\n\n\t\t// Create request and set up handlers\n\t\tlet xhr = new XMLHttpRequest();\n\t\txhr.onload = () => {\n\t\t\tif (xhr.status === 200) {\n\n\t\t\t\tlet response: Optional<string>;\n\t\t\t\tlet blob: Optional<Blob>;\n\n\t\t\t\tif (isBlob) {\n\t\t\t\t\tblob = xhr.response;\n\t\t\t\t\treadBlob(blob!).then((response: any) => {\n\t\t\t\t\t\tlet output: INetLoadResult<A> = {\n\t\t\t\t\t\t\txhr: xhr,\n\t\t\t\t\t\t\terror: false,\n\t\t\t\t\t\t\tresponse: response,\n\t\t\t\t\t\t\tblob: blob,\n\t\t\t\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\n\t\t\t\t\t\t\ttarget: target\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsuccess(output);\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresponse = xhr.responseText || xhr.response\n\t\t\t\t}\n\n\t\t\t\tlet output: INetLoadResult<A> = {\n\t\t\t\t\txhr: xhr,\n\t\t\t\t\terror: false,\n\t\t\t\t\tresponse: response,\n\t\t\t\t\tblob: blob,\n\t\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\n\t\t\t\t\ttarget: target\n\t\t\t\t};\n\t\t\t\tsuccess(output);\n\t\t\t}\n\t\t\telse {\n\t\t\t\terror({\n\t\t\t\t\txhr: xhr,\n\t\t\t\t\terror: true,\n\t\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\n\t\t\t\t\ttarget: target\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\txhr.onerror = () => {\n\t\t\terror({\n\t\t\t\txhr: xhr,\n\t\t\t\terror: true,\n\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\n\t\t\t\ttarget: target\n\t\t\t});\n\t\t};\n\n\t\t// Open request\n\t\txhr.open(\"GET\", url, true);\n\n\t\tif (options && options.withCredentials) {\n\t\t\txhr.withCredentials = true;\n\t\t}\n\n\t\t// Process options\n\t\tif (options != null) {\n\n\t\t\tif (options.requestHeaders != null) {\n\t\t\t\tfor (let i = 0; i < options.requestHeaders.length; i++) {\n\t\t\t\t\tlet header = options.requestHeaders[i];\n\t\t\t\t\txhr.setRequestHeader(header.key, header.value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (options.responseType != null) {\n\t\t\t\txhr.responseType = options.responseType;\n\t\t\t}\n\t\t}\n\n\t\t// Send request\n\t\txhr.send();\n\n\t});\n\n}\n\n/**\n * Returns textual representation of a Blob object.\n *\n * @param   blob  Target blob\n * @return        Text promise\n */\nexport function readBlob(blob: Blob): Promise<string> {\n\treturn new Promise<string>((success, error) => {\n\t\tconst reader = new FileReader()\n\n\t\treader.onload = _event => {\n\t\t\tsuccess(<string>reader.result);\n\t\t}\n\n\t\treader.onerror = (e) => {\n\t\t\terror(e);\n\t\t}\n\n\t\treader.readAsText(blob);\n\t});\n}\n"]}