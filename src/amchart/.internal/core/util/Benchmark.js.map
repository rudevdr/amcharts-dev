{"version":3,"file":"Benchmark.js","sourceRoot":"","sources":["../../../../../../src/.internal/core/util/Benchmark.ts"],"names":[],"mappings":"AAAA,cAAc,CAAA,MAAM;AAEpB,OAAO,KAAK,MAAM,MAAM,SAAS,CAAC;AAUlC;;GAEG;AACH,MAAM,MAAM;IACX,YAAmB,QAAgB,EAAS,UAAkB;;;;;mBAA3C;;;;;;mBAAyB;;IAAqB,CAAC;IAE3D,EAAE;QACR,OAAO,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC;IACxC,CAAC;CACD;AAED;;GAEG;AACH,SAAS,OAAO,CAAC,EAAiB;IACjC,IAAI,UAAU,GAAG,CAAC,CAAC;IAEnB,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACzB,MAAM,GAAG,GAAG,KAAK,GAAG,KAAK,CAAC;IAE1B,SAAS;QACR,IAAI,CAAC,EAAE,EAAE,EAAE;YACV,OAAO;SACP;QAED,EAAE,UAAU,CAAC;QAEb,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAEvB,IAAI,GAAG,IAAI,GAAG,EAAE;YACf,OAAO,IAAI,MAAM,CAAC,GAAG,GAAG,KAAK,EAAE,UAAU,CAAC,CAAC;SAC3C;KACD;AACF,CAAC;AAED;;GAEG;AACH,MAAM,OAAO,SAAS;IAAtB;QACC;;;;mBAA+B,EAAE;WAAC;IAkCnC,CAAC;IAhCO,IAAI,CAAC,IAAY,EAAE,EAAiB;QAC1C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;IAC/B,CAAC;IAEM,GAAG;QACT,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;QAErC,IAAI,MAAM,GAAG,CAAC,CAAC;QAEf,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,EAAE;YAChC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE;gBACf,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,CAAC;aACvC;YAED,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,IAAI,CAAE,CAAC,EAAE,EAAE,CAAC;QAExC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,EAAE;YAChC,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAEhC,IAAI,MAAM,EAAE;gBACX,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;aAEvF;iBAAM;gBACN,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,CAAC;aACvC;QACF,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;IACnC,CAAC;CACD","sourcesContent":["/** @ignore *//** */\n\nimport * as $array from \"./Array\";\n\n/**\n * @ignore\n */\ninterface Test {\n\tname: string;\n\tfn: () => boolean;\n}\n\n/**\n * @ignore\n */\nclass Result {\n\tconstructor(public duration: number, public iterations: number) {}\n\n\tpublic ms(): number {\n\t\treturn this.duration / this.iterations;\n\t}\n}\n\n/**\n * @ignore\n */\nfunction runTest(fn: () => boolean): Result | undefined {\n\tlet iterations = 0;\n\n\tconst start = Date.now();\n\tconst end = start + 10000;\n\n\tfor (;;) {\n\t\tif (!fn()) {\n\t\t\treturn;\n\t\t}\n\n\t\t++iterations;\n\n\t\tconst now = Date.now();\n\n\t\tif (now >= end) {\n\t\t\treturn new Result(now - start, iterations);\n\t\t}\n\t}\n}\n\n/**\n * @ignore\n */\nexport class Benchmark {\n\tprotected tests: Array<Test> = [];\n\n\tpublic test(name: string, fn: () => boolean): void {\n\t\tthis.tests.push({ name, fn });\n\t}\n\n\tpublic run(): void {\n\t\tconsole.log(\"Benchmark starting...\");\n\n\t\tlet maxLen = 0;\n\n\t\t$array.each(this.tests, (test) => {\n\t\t\tif (!test.fn()) {\n\t\t\t\tthrow new Error(test.name + \" failed\");\n\t\t\t}\n\n\t\t\tmaxLen = Math.max(maxLen, test.name.length);\n\t\t});\n\n\t\tconst empty = runTest(() => true)!.ms();\n\n\t\t$array.each(this.tests, (test) => {\n\t\t\tconst result = runTest(test.fn);\n\n\t\t\tif (result) {\n\t\t\t\tconsole.log(`${test.name.padStart(maxLen)}:  ${(result.ms() - empty).toFixed(10)} ms`);\n\n\t\t\t} else {\n\t\t\t\tthrow new Error(test.name + \" failed\");\n\t\t\t}\n\t\t});\n\n\t\tconsole.log(\"Benchmark finished\");\n\t}\n}\n"]}