{"version":3,"file":"RadialText.js","sourceRoot":"","sources":["../../../../../../src/.internal/core/render/RadialText.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAA+B,MAAM,QAAQ,CAAC;AAC3D,OAAO,KAAK,KAAK,MAAM,cAAc,CAAC;AAqBtC;;GAEG;AACH,MAAM,OAAO,UAAW,SAAQ,IAAI;IAApC;;QAKC;;;;mBAA+B,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC;WAAC;IA6CxF,CAAC;IA3CU,SAAS;QAClB,KAAK,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAKM,cAAc;QACpB,KAAK,CAAC,cAAc,EAAE,CAAC;QAEvB,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QAEtB,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;YAC7B,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC9C,IAAI,CAAC,eAAe,EAAE,CAAC;SACvB;QAED,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAC3B,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC1C,IAAI,CAAC,eAAe,EAAE,CAAC;SACvB;QAED,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;YAC/B,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,CAAE,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC;YAC7E,IAAI,CAAC,eAAe,EAAE,CAAC;SACvB;QAED,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAC3B,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC1C,IAAI,CAAC,eAAe,EAAE,CAAC;SACvB;QAED,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;YAChC,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;YACpD,IAAI,CAAC,eAAe,EAAE,CAAC;SACvB;QAED,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YAC5B,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAC5C,IAAI,CAAC,eAAe,EAAE,CAAC;SACvB;IACF,CAAC;;AArCD;;;;WAAkC,YAAY;GAAC;AAC/C;;;;WAA0C,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;GAAC","sourcesContent":["import { Text, ITextSettings, ITextPrivate } from \"./Text\";\nimport * as $math from \"../util/Math\";\nimport type { IRadialText } from \"./backend/Renderer\";\n\n/**\n * @ignore\n */\nexport interface IRadialTextSettings extends ITextSettings {\n\ttextType?: \"regular\" | \"circular\" | \"radial\" | \"aligned\" | \"adjusted\";\n\tradius?: number;\n\tstartAngle?: number;\n\tinside?: boolean;\n\torientation?: \"inward\" | \"outward\" | \"auto\";\n\tkerning?: number;\n}\n\n/**\n * @ignore\n */\nexport interface IRadialTextPrivate extends ITextPrivate {\n}\n\n/**\n * @ignore\n */\nexport class RadialText extends Text {\n\n\tdeclare public _settings: IRadialTextSettings;\n\tdeclare public _privateSettings: IRadialTextPrivate;\n\n\tpublic _display: IRadialText = this._root._renderer.makeRadialText(\"\", this.textStyle);\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t}\n\n\tpublic static className: string = \"RadialText\";\n\tpublic static classNames: Array<string> = Text.classNames.concat([RadialText.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tthis._display.clear();\n\n\t\tif (this.isDirty(\"textType\")) {\n\t\t\tthis._display.textType = this.get(\"textType\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"radius\")) {\n\t\t\tthis._display.radius = this.get(\"radius\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"startAngle\")) {\n\t\t\tthis._display.startAngle = (this.get(\"startAngle\", 0)! + 90) * $math.RADIANS;\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"inside\")) {\n\t\t\tthis._display.inside = this.get(\"inside\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"orientation\")) {\n\t\t\tthis._display.orientation = this.get(\"orientation\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"kerning\")) {\n\t\t\tthis._display.kerning = this.get(\"kerning\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\t}\n\n}\n"]}